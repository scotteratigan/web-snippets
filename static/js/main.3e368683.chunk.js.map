{"version":3,"sources":["CodeInput.js","ResultFrame.js","App.js","serviceWorker.js","index.js"],"names":["CodeInput","codeType","code","setCode","TextArea","spellCheck","value","onChange","e","target","styled","textarea","ResultFrame","src","encodeURIComponent","IframeHeader","ResultIframe","h2","iframe","CodingArea","div","AppDiv","PageHeader","h1","ControlArea","ControlButton","button","Boolean","window","location","hostname","match","ReactDOM","render","useState","defaultCode","html","setHTML","css","setCSS","js","setJS","iFrameCode","setiFrameCode","onClick","newHTML","prettier","format","parser","plugins","parserHTML","newCSS","parserPostCSS","newJS","parserBabel","console","log","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2cAGe,SAASA,EAAT,GAAiD,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAClD,OACE,6BACE,4BAAKF,GACL,kBAACG,EAAD,CAAUC,YAAY,EAAOC,MAAOJ,EAAMK,SAAU,SAAAC,GAAC,OAAIL,EAAQK,EAAEC,OAAOH,WAKhF,IAAMF,EAAWM,IAAOC,SAAV,K,kTCTC,SAASC,EAAT,GAAgC,IAATV,EAAQ,EAARA,KAC9BW,EAAM,kBAAoBC,mBAAmBZ,GACnD,OACE,oCACE,kBAACa,EAAD,eACA,kBAACC,EAAD,CAAcH,IAAKA,KAKzB,IAAME,EAAeL,IAAOO,GAAV,KAKZD,EAAeN,IAAOQ,OAAV,K,2tBCoDlB,IAAMC,EAAaT,IAAOU,IAAV,KAMVC,EAASX,IAAOU,IAAV,KAENE,EAAaZ,IAAOa,GAAV,KAMVC,EAAcd,IAAOU,IAAV,KAKXK,EAAgBf,IAAOgB,OAAV,KC7ECC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFID,WAAgB,IAAD,EACJC,mBAASC,EAAYC,MADjB,mBACrBA,EADqB,KACfC,EADe,OAENH,mBAASC,EAAYG,KAFf,mBAErBA,EAFqB,KAEhBC,EAFgB,OAGRL,mBAASC,EAAYK,IAHb,mBAGrBA,EAHqB,KAGjBC,EAHiB,OAIQP,mBAAS,IAJjB,mBAIrBQ,EAJqB,KAITC,EAJS,KA2C5B,OACE,kBAACtB,EAAD,KACE,kBAACC,EAAD,2BACA,kBAACH,EAAD,KACE,kBAACnB,EAAD,CAAWC,SAAS,OAAOC,KAAMkC,EAAMjC,QAASkC,IAChD,kBAACrC,EAAD,CAAWC,SAAS,MAAMC,KAAMoC,EAAKnC,QAASoC,IAC9C,kBAACvC,EAAD,CAAWC,SAAS,aAAaC,KAAMsC,EAAIrC,QAASsC,KAEtD,kBAACjB,EAAD,KACE,kBAACC,EAAD,CAAemB,QA1BrB,WACE,IAAMC,EAAUC,IAASC,OAAOX,EAAM,CACpCY,OAAQ,OACRC,QAAS,CAACC,OAENC,EAASL,IAASC,OAAOT,EAAK,CAClCU,OAAQ,MACRC,QAAS,CAACG,OAENC,EAAQP,IAASC,OAAOP,EAAI,CAChCQ,OAAQ,QACRC,QAAS,CAACK,OAEZjB,EAAQQ,GACRN,EAAOY,GACPV,EAAMY,KAWF,eACA,kBAAC5B,EAAD,CAAemB,QAhDrB,WACE,IAAM1C,EAAI,iEAIFoC,EAJE,kEAQNF,EARM,sGAWFI,EAXE,uEAiBVG,EAAczC,GACdqD,QAAQC,IAAI,mBAAoBtD,KA6B5B,kBAEF,kBAACU,EAAD,CAAaV,KAAMwC,OE3DT,MAASe,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3e368683.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport default function CodeInput({ codeType, code, setCode }) {\n  return (\n    <div>\n      <h2>{codeType}</h2>\n      <TextArea spellCheck={false} value={code} onChange={e => setCode(e.target.value)}></TextArea>\n    </div>\n  );\n}\n\nconst TextArea = styled.textarea`\n  background-color: #111;\n  color: #eee;\n  border: 1px solid #eee;\n  height: 40vh;\n  width: 30vw;\n  border-radius: 3px;\n  padding: 3px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport default function ResultFrame({ code }) {\n  const src = 'data:text/html,' + encodeURIComponent(code);\n  return (\n    <>\n      <IframeHeader>Result</IframeHeader>\n      <ResultIframe src={src} />\n    </>\n  );\n}\n\nconst IframeHeader = styled.h2`\n  text-align: center;\n  font-size: 1.5rem;\n`;\n\nconst ResultIframe = styled.iframe`\n  display: block;\n  background-color: white;\n  color: black;\n  width: 90vw;\n  height: 35vh;\n  margin: 1rem auto;\n`;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport CodeInput from './CodeInput';\nimport ResultFrame from './ResultFrame';\nimport defaultCode from './defaultCode.json';\nimport parserBabel from 'prettier/parser-babylon';\nimport parserPostCSS from 'prettier/parser-postcss';\nimport parserHTML from 'prettier/parser-html';\nimport prettier from 'prettier/standalone';\n\nexport default function App() {\n  const [html, setHTML] = useState(defaultCode.html);\n  const [css, setCSS] = useState(defaultCode.css);\n  const [js, setJS] = useState(defaultCode.js);\n  const [iFrameCode, setiFrameCode] = useState('');\n  function updateIframe() {\n    const code = `\n    <html>\n      <head>\n        <style>\n          ${css}\n        </style>\n      </head>\n      <body>\n      ${html}\n      <script>\n        document.addEventListener(\"DOMContentLoaded\", () => {\n          ${js}\n        });\n      </script>\n      </body>\n    </html>\n      `;\n    setiFrameCode(code);\n    console.log('setting code to:', code);\n  }\n  function formatCode() {\n    const newHTML = prettier.format(html, {\n      parser: 'html',\n      plugins: [parserHTML],\n    });\n    const newCSS = prettier.format(css, {\n      parser: 'css',\n      plugins: [parserPostCSS],\n    });\n    const newJS = prettier.format(js, {\n      parser: 'babel',\n      plugins: [parserBabel],\n    });\n    setHTML(newHTML);\n    setCSS(newCSS);\n    setJS(newJS);\n  }\n  return (\n    <AppDiv>\n      <PageHeader>Web Snippet Tester</PageHeader>\n      <CodingArea>\n        <CodeInput codeType='HTML' code={html} setCode={setHTML} />\n        <CodeInput codeType='CSS' code={css} setCode={setCSS} />\n        <CodeInput codeType='JavaScript' code={js} setCode={setJS} />\n      </CodingArea>\n      <ControlArea>\n        <ControlButton onClick={formatCode}>Format Code</ControlButton>\n        <ControlButton onClick={updateIframe}>Update iFrame</ControlButton>\n      </ControlArea>\n      <ResultFrame code={iFrameCode} />\n    </AppDiv>\n  );\n}\n\nconst CodingArea = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 0 1rem;\n`;\n\nconst AppDiv = styled.div``;\n\nconst PageHeader = styled.h1`\n  text-align: center;\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n`;\n\nconst ControlArea = styled.div`\n  text-align: center;\n  margin: 1rem 0;\n`;\n\nconst ControlButton = styled.button`\n  background-color: silver;\n  color: black;\n  border: 1px solid #111;\n  margin: 0 1rem;\n  padding: 0.2rem 0.6rem;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}