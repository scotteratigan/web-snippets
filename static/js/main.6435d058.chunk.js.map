{"version":3,"sources":["CodeInput.js","ResultFrame.js","App.js","serviceWorker.js","index.js"],"names":["CodeInput","codeType","code","setCode","editorTabs","TextArea","spellCheck","value","onChange","e","target","style","width","editorWidth","margin","styled","textarea","ResultFrame","src","encodeURIComponent","IframeHeader","ResultIframe","h2","iframe","CodingArea","div","AppDiv","PageHeader","h1","ControlArea","ControlButton","button","ViewTabs","ViewTabLabel","label","Boolean","window","location","hostname","match","ReactDOM","render","useState","defaultCode","html","setHTML","css","setCSS","js","setJS","setEditorTabs","iFrameCode","setiFrameCode","editHTML","setEditHTML","editCSS","setEditCSS","editJS","setEditJS","toggleEditor","toggleField","type","checked","onClick","newHTML","prettier","format","parser","plugins","parserHTML","newCSS","parserPostCSS","newJS","parserBabel","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6435d058.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nexport default function CodeInput({ codeType, code, setCode, editorTabs }) {\n  function editorWidth() {\n    switch (editorTabs) {\n      case 1:\n        return \"90vw\";\n      case 2:\n        return \"45vw\";\n      case 3:\n      default:\n        return \"30vw\";\n    }\n  }\n  return (\n    <div>\n      <h2>{codeType}</h2>\n      <TextArea\n        spellCheck={false}\n        value={code}\n        onChange={e => setCode(e.target.value)}\n        style={{ width: editorWidth(), margin: `0 10px` }}\n      ></TextArea>\n    </div>\n  );\n}\n\nconst TextArea = styled.textarea`\n  background-color: #111;\n  color: #eee;\n  border: 1px solid #eee;\n  height: 40vh;\n  border-radius: 3px;\n  padding: 3px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport default function ResultFrame({ code }) {\n  const src = 'data:text/html,' + encodeURIComponent(code);\n  return (\n    <>\n      <IframeHeader>Result</IframeHeader>\n      <ResultIframe src={src} />\n    </>\n  );\n}\n\nconst IframeHeader = styled.h2`\n  text-align: center;\n  font-size: 1.5rem;\n`;\n\nconst ResultIframe = styled.iframe`\n  display: block;\n  background-color: white;\n  color: black;\n  width: 90vw;\n  height: 35vh;\n  margin: 1rem auto;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport CodeInput from \"./CodeInput\";\nimport ResultFrame from \"./ResultFrame\";\nimport defaultCode from \"./defaultCode.json\";\nimport parserBabel from \"prettier/parser-babylon\";\nimport parserPostCSS from \"prettier/parser-postcss\";\nimport parserHTML from \"prettier/parser-html\";\nimport prettier from \"prettier/standalone\";\n\nexport default function App() {\n  const [html, setHTML] = useState(defaultCode.html);\n  const [css, setCSS] = useState(defaultCode.css);\n  const [js, setJS] = useState(defaultCode.js);\n  const [editorTabs, setEditorTabs] = useState(3);\n  const [iFrameCode, setiFrameCode] = useState(\"\");\n  const [editHTML, setEditHTML] = useState(true);\n  const [editCSS, setEditCSS] = useState(true);\n  const [editJS, setEditJS] = useState(true);\n  function updateIframe() {\n    const code = `\n    <html>\n      <head>\n        <style>\n          ${css}\n        </style>\n      </head>\n      <body>\n      ${html}\n      <script>\n        document.addEventListener(\"DOMContentLoaded\", () => {\n          ${js}\n        });\n      </script>\n      </body>\n    </html>\n      `;\n    setiFrameCode(code);\n  }\n  function clearIframe() {\n    setiFrameCode(\"\");\n  }\n  function formatCode() {\n    const newHTML = prettier.format(html, {\n      parser: \"html\",\n      plugins: [parserHTML]\n    });\n    const newCSS = prettier.format(css, {\n      parser: \"css\",\n      plugins: [parserPostCSS]\n    });\n    const newJS = prettier.format(js, {\n      parser: \"babel\",\n      plugins: [parserBabel]\n    });\n    setHTML(newHTML);\n    setCSS(newCSS);\n    setJS(newJS);\n  }\n  function toggleEditor(toggleField) {\n    let html = editHTML;\n    let css = editCSS;\n    let js = editJS;\n    switch (toggleField) {\n      case \"html\":\n        html = !html;\n        setEditHTML(html);\n        break;\n      case \"css\":\n        css = !css;\n        setEditCSS(css);\n        break;\n      case \"js\":\n      default:\n        js = !js;\n        setEditJS(js);\n        break;\n    }\n    const newEditorTabs = html + css + js;\n    setEditorTabs(newEditorTabs);\n  }\n  return (\n    <AppDiv>\n      <PageHeader>Web Snippet Tester</PageHeader>\n      <ViewTabs>\n        <ViewTabLabel>\n          HTML:{\" \"}\n          <input\n            type=\"checkbox\"\n            checked={editHTML}\n            onChange={() => toggleEditor(\"html\")}\n          />\n        </ViewTabLabel>\n        <ViewTabLabel>\n          CSS:{\" \"}\n          <input\n            type=\"checkbox\"\n            checked={editCSS}\n            onChange={() => toggleEditor(\"css\")}\n          />\n        </ViewTabLabel>\n        <ViewTabLabel>\n          JS:{\" \"}\n          <input\n            type=\"checkbox\"\n            checked={editJS}\n            onChange={() => toggleEditor(\"js\")}\n          />\n        </ViewTabLabel>\n      </ViewTabs>\n      <CodingArea>\n        {editHTML && (\n          <CodeInput\n            codeType=\"HTML\"\n            code={html}\n            setCode={setHTML}\n            editorTabs={editorTabs}\n          />\n        )}\n        {editCSS && (\n          <CodeInput\n            codeType=\"CSS\"\n            code={css}\n            setCode={setCSS}\n            editorTabs={editorTabs}\n          />\n        )}\n        {editJS && (\n          <CodeInput\n            codeType=\"JavaScript\"\n            code={js}\n            setCode={setJS}\n            editorTabs={editorTabs}\n          />\n        )}\n      </CodingArea>\n      <ControlArea>\n        <ControlButton onClick={formatCode}>Format Code</ControlButton>\n        <ControlButton onClick={updateIframe}>Update iFrame</ControlButton>\n        <ControlButton onClick={clearIframe}>Clear iFrame</ControlButton>\n      </ControlArea>\n      <ResultFrame code={iFrameCode} />\n    </AppDiv>\n  );\n}\n\nconst CodingArea = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 0 1rem;\n`;\n\nconst AppDiv = styled.div``;\n\nconst PageHeader = styled.h1`\n  text-align: center;\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n`;\n\nconst ControlArea = styled.div`\n  text-align: center;\n  margin: 1rem 0;\n`;\n\nconst ControlButton = styled.button`\n  background-color: #e2e2e2;\n  color: black;\n  border: 1px solid silver;\n  border-radius: 3px;\n  margin: 0 1rem;\n  padding: 0.2rem 0.6rem;\n`;\n\nconst ViewTabs = styled.div`\n  text-align: center;\n`;\n\nconst ViewTabLabel = styled.label`\n  margin: 0 1rem;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}